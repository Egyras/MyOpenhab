


rule "Panasonic Heat control"
when
	  System started
	or
      Item Lueftung_Ablufttemperatur changed
    or  
      Item Lauko_TP changed
    or
      Item Lueftung_Aussenlufttemperatur changed
    or 
      Time cron "0 0/1 * * * ?"  
	then
	  //val currMonth = now.getMonthOfYear
      var Number hour   = now.getHourOfDay
     // var Number minute = now.getMinuteOfHour
     var Number LaukoTemp = Lauko_TP.state as DecimalType
      var boolean isnight = false
      var boolean isWinter = false
      if(LaukoTemp <=19) isWinter = true
   

    if(hour >= 18 || hour <= 01) isnight = true 
  //if( hour >= 18 && (hour <= 20 && minute >=01) ) isnight = true 

  var MT = Lueftung_Ablufttemperatur.state as Number 
  var LaukoT = Lauko_TP.state as Number
  var MT1h = Lueftung_Ablufttemperatur.minimumSince(now.minusMinutes(20)).state as Number


 if(isWinter && isnight){
                 
       sendCommand(panasonic_h, OFF)  { logInfo("panasonic.rules", "Panasonic Night Heating OFF") }
        }
        else if(isWinter && MT1h <= 22.5)
        {
               sendCommand(panasonic_h, ON)  { logInfo("panasonic.rules", "Panasonic Heating ON") }
        }
           else if(isWinter && MT >= 23)
           {
           sendCommand(panasonic_h, OFF)  { logInfo("panasonic.rules", "Panasonic Heating OFF") }
      }
      
   else if( !isWinter && LaukoT>=19 && MT>=25.5){
  	
  	 sendCommand(panasonic_c, OFF)  { logInfo("panasonic.rules", "panasonic Cool ON") }
  	 }
  	 else if(MT<=25){
  	 sendCommand(panasonic_c, ON)  { logInfo("panasonic.rules", "panasonic Cool OFF") }	
  	 	  	 }
  	
   
end

rule "Calulate Kwh Heat water comsumption"
when
	System started
	or
     Item panasonic_kwh_heat changed
        or
     Item panasonic_hwater changed
	then 
      	    var Number kwhwater = panasonic_kwh_heat.state as DecimalType
            	if( (panasonic_hwater.state as DecimalType) == 1) { 
      postUpdate(panasonic_kwh_hwater,kwhwater) + "Kwh"
            }
end
rule "Calulate Kwh Heat and water comsumption in seperate graphs"
when
	System started
	or
     Item panasonic_kwh_heat changed
       or
     Item panasonic_kwh_hwater changed
       or
     Item Lueftung_Ablufttemperatur changed 
   
	then 
     var MTT = Lueftung_Ablufttemperatur.state as Number
     if(MTT <= 26.5) {
     //var Number kwhwaterdiff = panasonic_hwater.deltaSince(now.minusMinutes(1))
	  	//var Number kwhHeat = panasonic_kwh_heat.previousState().state
	  	//var Number kwhwaterr = panasonic_kwh_hwater.previousState().state
      var Number kwhHeatdiff = panasonic_kwh_heat.deltaSince(now.withTimeAtStartOfDay())
      //var Number kwhwaterdiff = panasonic_kwh_waterdiff1m_kwh_hwater.deltaSince(now.toDateMidnight)
      //var Number kwhwaterdiffmin = panasonic_kwh_hwater.minimumSince(now.withTimeAtStartOfDay()).state
      var Number kwhwatercalc = panasonic_kwh_waterdiff1minute.sumSince(now.withTimeAtStartOfDay())
      //var Number kwhwatermin = panasonic_kwh_hwater.minimumSince(now.withTimeAtStartOfDay()).state
      //var Number kwhwatermax = panasonic_kwh_hwater.maximumSince(now.withTimeAtStartOfDay()).state
      //var Number test = panasonic_kwh_heat.deltaSince(now.withTimeAtStartOfDay())
      //var Number kwhwaterdiffsum = panasonic_kwh_waterdiff1m.sumSince(now.withTimeAtStartOfDay())
     //postUpdate(panasonic_kwh_waterdiff1m,kwhwaterdiff)
		 	//var Number diff = kwhHeatdiff - kwhwaterdiff
      //var Number kwhwatercalc = kwhwatermax - kwhwatermin
      var Number diffnew = kwhHeatdiff - kwhwatercalc
      
	 	//var Number diff = panasonic_kwh.minimumSince(now.minusHours(10)).state
     //var Number diff = panasonic_kwh.historicState(parse("2018-09-25T3:42:00.0000")).state

	   //postUpdate(panasonic_cons_heat,diffdddd)
     postUpdate(panasonic_kwh_heatdiff,kwhHeatdiff)
     postUpdate(panasonic_kwh_watercons,kwhwatercalc)
     //postUpdate(panasonic_,kwhwatercalc)
     postUpdate(panasonic_cons_heatnew,diffnew)
     

	//postUpdate(panasonic_kwh_cool,kwhHeat) + "Kwh"
  //heatting season 2018.10.25
     }
	
end

rule "Calulate Kwh Cool and water comsumption in seperate graphs"
when
	System started
	or
     Item panasonic_kwh_cool changed
       or
     Item panasonic_kwh_hwater changed
       or
     Item Lueftung_Ablufttemperatur changed 
   
	then 
  var MTTT = Lueftung_Ablufttemperatur.state as Number
if(MTTT > 23.5) {
     //var Number kwhwaterdiff = panasonic_hwater.deltaSince(now.minusMinutes(1))
	  	//var Number kwhHeat = panasonic_kwh_heat.previousState().state
	  	//var Number kwhwaterr = panasonic_kwh_hwater.previousState().state
      var Number kwhCooldiff = panasonic_kwh_cool.deltaSince(now.withTimeAtStartOfDay())
      //var Number kwhwaterdiff = panasonic_kwh_waterdiff1m_kwh_hwater.deltaSince(now.toDateMidnight)
      //var Number kwhwaterdiffmin = panasonic_kwh_hwater.minimumSince(now.withTimeAtStartOfDay()).state
      var Number kwhwatercalcc = panasonic_kwh_waterdiff1minute.sumSince(now.withTimeAtStartOfDay())
      //var Number kwhwatermin = panasonic_kwh_hwater.minimumSince(now.withTimeAtStartOfDay()).state
      //var Number kwhwatermax = panasonic_kwh_hwater.maximumSince(now.withTimeAtStartOfDay()).state
      //var Number test = panasonic_kwh_heat.deltaSince(now.withTimeAtStartOfDay())
      //var Number kwhwaterdiffsum = panasonic_kwh_waterdiff1m.sumSince(now.withTimeAtStartOfDay())
     //postUpdate(panasonic_kwh_waterdiff1m,kwhwaterdiff)
		 	//var Number diff = kwhHeatdiff - kwhwaterdiff
      //var Number kwhwatercalc = kwhwatermax - kwhwatermin
      var Number diffneww = kwhCooldiff - kwhwatercalcc
      
	 	//var Number diff = panasonic_kwh.minimumSince(now.minusHours(10)).state
     //var Number diff = panasonic_kwh.historicState(parse("2018-09-25T3:42:00.0000")).state

	   //postUpdate(panasonic_cons_heat,diffdddd)
     //postUpdate(panasonic_kwh_heatdiff,kwhHeatdiff)
     postUpdate(panasonic_kwh_watercons,kwhwatercalcc)
     //postUpdate(panasonic_,kwhwatercalc)
     postUpdate(panasonic_cons_coolnew,diffneww)
     

	//postUpdate(panasonic_kwh_cool,kwhHeat) + "Kwh"
  //heatting season 2018.10.25
}
end

rule "Calulate Kwh Heat water comsumption"
when
	System started
	or
     Item panasonic_kwh_heat changed
        or
     Item panasonic_hwater changed
	then 
      	    var Number kwhwater = panasonic_kwh_heat.state as DecimalType
            	if( (panasonic_hwater.state as DecimalType) == 1) { 
      postUpdate(panasonic_kwh_hwater,kwhwater) + "Kwh"
            }
end

rule "Heat Control"
when
	System started
	or
     Item panasonic_heat_pump_HeatShiftTemp changed
       or
     Item panasonic_heat_pump_RoomTherTemp changed
       or
     Item panasonic_heat_pump_PumpFlow changed
       or  
     Item Lueftung_Ablufttemperatur changed
	then 
     var RoomTemp = panasonic_heat_pump_RoomTherTemp.state as Number
     var Number TistrisNamo = Lueftung_Ablufttemperatur.state as DecimalType
     if(RoomTemp <= 25) {
    
          postUpdate(panasonic_heat_pump_Shift_mode,0)
     
     }
     else if(RoomTemp >= 26 || TistrisNamo >= 22.5  ) {
    
          postUpdate(panasonic_heat_pump_Shift_mode,-5)
     
     }
	
end