


rule "Panasonic Heat control"
when
	  System started
	or
      Item Lueftung_Ablufttemperatur changed
    or  
      Item Lauko_TP changed
    or
      Item Lueftung_Aussenlufttemperatur changed
    or 
      Time cron "0 0/1 * * * ?"  
	then
	  //val currMonth = now.getMonthOfYear
      var Number hour   = now.getHourOfDay
     // var Number minute = now.getMinuteOfHour
     var Number LaukoTemp = Lauko_TP.state as DecimalType
      var boolean isnight = false
      var boolean isWinter = false
      if(LaukoTemp <=19) isWinter = true
   

    if(hour >= 18 || hour <= 01) isnight = true 
  //if( hour >= 18 && (hour <= 20 && minute >=01) ) isnight = true 

  var MT = Lueftung_Ablufttemperatur.state as Number 
  var LaukoT = Lauko_TP.state as Number
  var MT1h = Lueftung_Ablufttemperatur.minimumSince(now.minusHours(1)).state as Number


 if(isWinter && isnight){
        
         
       sendCommand(panasonic_h, OFF)  { logInfo("panasonic.rules", "Panasonic Night Heating OFF") }
        }
        else if(isWinter && MT1h <= 22.5)
        {
               sendCommand(panasonic_h, ON)  { logInfo("panasonic.rules", "Panasonic Heating ON") }
        }
           else if(isWinter && MT >= 23)
           {
           sendCommand(panasonic_h, OFF)  { logInfo("panasonic.rules", "Panasonic Heating OFF") }
      }
      
   else if( !isWinter && LaukoT>=19 && MT>=25.5){
  	
  	 sendCommand(panasonic_c, OFF)  { logInfo("panasonic.rules", "panasonic Cool ON") }
  	 }
  	 else if(MT<=25){
  	 sendCommand(panasonic_c, ON)  { logInfo("panasonic.rules", "panasonic Cool OFF") }	
  	 	  	 }
  	
   
end

rule "Calulate Kwh Heat water comsumption"
when
	System started
	or
     Item panasonic_kwh_heat changed
        or
     Item panasonic_hwater changed
	then 
      	    var Number kwhwater = panasonic_kwh_heat.state as DecimalType
	  	if( (panasonic_hwater.state as DecimalType) == 1) { 
      postUpdate(panasonic_kwh_hwater,kwhwater) + "Kwh"
      }
end
rule "Calulate Kwh Heat comsumption"
when
	System started
	or
     Item panasonic_kwh_heat changed
       or
     Item panasonic_kwh_hwater changed  
   
	then 
     
	  	var Number kwhHeat = panasonic_kwh_heat.previousState().state
	  	var Number kwhwaterr = panasonic_kwh_hwater.previousState().state
		 	var Number diff = kwhHeat - kwhwaterr
      
	 	//var Number diff = panasonic_kwh.minimumSince(now.minusHours(10)).state
     //var Number diff = panasonic_kwh.historicState(parse("2018-09-25T3:42:00.0000")).state

	   postUpdate(panasonic_cons_heat,diff)
	//postUpdate(panasonic_kwh_cool,kwhHeat) + "Kwh"
  //
	
end
