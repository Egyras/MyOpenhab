

rule "Calculate Kwh Heat water comsumption"
when
	System started
	or
     Item panasonic_kwh_heat changed
     or
     Item panasonic_hwater changed
	then 
      	    var Number kwhwater = panasonic_kwh_heat.state as DecimalType
            	if( (panasonic_hwater.state as Number)  == 1 || (panasonic_heat_pump_walve_state.state as Number) == 1 ) {
      postUpdate(panasonic_kwh_hwater,kwhwater) + "Kwh"
            }
end
rule "Calculate Kwh Heat/Cool and water comsumption in seperate graphs"
when
	System started
	or
     Item panasonic_kwh_heat changed
     or
     Item panasonic_kwh_hwater changed
     or
     Item panasonic_heat_pump_Mode changed
       
	then 
      var Number kwhHeatdiff = panasonic_kwh_heat.deltaSince(now.withTimeAtStartOfDay())
      var Number kwhwatercalc = panasonic_kwh_waterdiff1minute.sumSince(now.withTimeAtStartOfDay())
      var Number diffnew = kwhHeatdiff - kwhwatercalc

    if( (panasonic_heat_pump_Mode.state as Number)  == 4 || (panasonic_heat_pump_Mode.state as Number) == 0 ) {
     
     postUpdate(panasonic_kwh_heatdiff,kwhHeatdiff)
     postUpdate(panasonic_kwh_watercons,kwhwatercalc)
     postUpdate(panasonic_cons_heatnew,diffnew)
     postUpdate(panasonic_cons_coolnew,0)

    }
       var Number kwhCooldiff = panasonic_kwh_cool.deltaSince(now.withTimeAtStartOfDay())
       var Number diffneww = kwhCooldiff - kwhwatercalc
    if( (panasonic_heat_pump_Mode.state as Number)  == 5 || (panasonic_heat_pump_Mode.state as Number) == 1 ) {

     postUpdate(panasonic_kwh_watercons,kwhwatercalc)
     postUpdate(panasonic_cons_coolnew,diffneww)
     postUpdate(panasonic_cons_heatnew,0)

    }     
/**
    if( (panasonic_heat_pump_Mode.state as Number)  == 3 ) {

     postUpdate(panasonic_kwh_watercons,kwhwatercalc)
    }
    */
end

/** rule "Calulate Kwh Cool and water comsumption in seperate graphs"
when
	System started
	or
     Item panasonic_kwh_cool changed
       or
     Item panasonic_kwh_hwater changed
       or
     Item Lueftung_Ablufttemperatur changed 
   
	then 
      var Number kwhCooldiff = panasonic_kwh_cool.deltaSince(now.withTimeAtStartOfDay())
      var Number kwhwatercalcc = panasonic_kwh_waterdiff1minute.sumSince(now.withTimeAtStartOfDay())
      var Number diffneww = kwhCooldiff - kwhwatercalcc
      
     postUpdate(panasonic_kwh_watercons,kwhwatercalcc)
     postUpdate(panasonic_cons_coolnew,diffneww)

end
*/

/*rule "Heat Control"
when
	System started
	or
     
     Item panasonic_heat_pump_RoomTherTemp changed
        
	then 
     var RoomTemp = panasonic_heat_pump_RoomTherTemp.state as Number
     var Number TistrisNamo = Lueftung_Ablufttemperatur.state as DecimalType
     //if(RoomTemp = 25) {
    
        //  sendCommand(panasonic_heat_pump_Shift_mode,0)
     
     //}
     //if(RoomTemp >= 27   ) {
    
          //sendCommand(panasonic_heat_pump_Shift_mode,-5)
     
    // }
	
end
*/

rule "COP Calulation"
when
	System started
	or
     Item panasonic_heat_pump_PumpFlow changed
     or
     Item Real_outlet changed
     or 
     Item Real_inlet changed
     or
     Item panasonic_w changed
        
	then 
     var Outlet = Real_outlet.state as Number
     var Inlet = Real_inlet.state as Number
     var Number flow = panasonic_heat_pump_PumpFlow.state as DecimalType
     var power = panasonic_w.state as Number
         
    
    if (Outlet > Inlet) {
    var Number deltaT = Outlet - Inlet
    var Number heatProd = ((flow / 60) * 4181) * deltaT
    var Number realCop = heatProd / power
          postUpdate(Real_cop,realCop)
    }
     else {
     postUpdate(Real_cop,0) 
     }
     
   
	
end

rule "Sun detection"

when
	System started
	or
     Item Real_outlet changed
     or
     Item panasonic_w changed
     or
     Time cron "0 0/1 * * * ?"

   then
   var Number OutletDelta = Real_outlet.deltaSince(now.minusHours(3))
   var Number Poweravg = panasonic_w.averageSince(now.minusHours(1))

if((now.plusHours(7).getHourOfDay > 12) && (OutletDelta > 0.05) && (Poweravg < 30)){
     postUpdate(Outlet_delta,1)
     }
    else {
         postUpdate(panasonic_avg,Poweravg)
         postUpdate(Outlet_delta,OutletDelta)
     }
end     

rule "Heating demand"
when
     System started
	or
     Item In_air_temp changed
     then
     var Number TempNow = In_air_temp.state as Number
     var Number TempBefore = In_air_temp.deltaSince(now.minusMinutes(40))
     //var Number TempD = TempBefore

     if(TempNow >= 23.2 || TempBefore >= 0.45) {
        postUpdate(HeatDemand,0)  
     }
     else {
          postUpdate(HeatDemand,1) 
     }
end



 rule "Auto Heating Stop/Start"
when
	System started
	or
     Item HeatDemand changed 
     or
     Item panasonic_heat_pump_Holiday changed
     or
     Item HeatDemandMode changed

    then
       val currentHoliday = panasonic_heat_pump_Holiday.state as Number
       //var newstate = currentHoliday
    
    if((HeatDemandMode.state == ON) && (HeatDemand.state as DecimalType == 1) && (currentHoliday == 2))  {
        
      sendCommand(panasonic_heat_pump_Holiday,0) { logInfo("panasonic.rules", "Auto Heating ON") }
      
    
    }
     else if((HeatDemandMode.state == ON) && (HeatDemand.state as DecimalType == 0) && (currentHoliday == 0)) {
          
      sendCommand(panasonic_heat_pump_Holiday,1) { logInfo("panasonic.rules", "Auto Heating OFF") }
     }

      if((HeatDemandMode.state == OFF) && (currentHoliday == 2)) {
      sendCommand(panasonic_heat_pump_Holiday,0) { logInfo("panasonic.rules", "Disable Auto Heating") }
        }
    

end